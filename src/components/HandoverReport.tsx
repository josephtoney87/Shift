import React from 'react';
import { motion } from 'framer-motion';
import { format, formatDistanceToNow } from 'date-fns';
import { 
  ClipboardList, 
  ArrowRightCircle, 
  Clock, 
  CheckCircle2, 
  UserCheck,
  AlertTriangle,
  ChevronDown,
  ChevronUp
} from 'lucide-react';
import { HandoverReport as HandoverReportType } from '../types';
import { useShopStore } from '../store/useShopStore';

interface HandoverReportProps {
  report: HandoverReportType;
  onAcknowledge?: () => void;
}

const HandoverReport: React.FC<HandoverReportProps> = ({ report, onAcknowledge }) => {
  const [expandedSection, setExpandedSection] = React.useState<string | null>('completed');
  const { workers } = useShopStore();

  const getWorkerName = (workerId: string) => {
    const worker = workers.find(w => w.id === workerId);
    return worker?.name || 'Unknown Worker';
  };

  const toggleSection = (section: string) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      {/* Header */}
      <div className="bg-primary-800 text-white p-4">
        <div className="flex justify-between items-start mb-2">
          <h2 className="text-xl font-semibold">Shift Handover Report</h2>
          <div className="text-sm text-primary-200">
            {format(new Date(report.generatedAt), 'MMM d, yyyy HH:mm')}
          </div>
        </div>
        <div className="flex items-center text-sm text-primary-200">
          <span>Generated by {getWorkerName(report.generatedBy)}</span>
          {report.acknowledgedBy && (
            <>
              <span className="mx-2">â€¢</span>
              <span>
                Acknowledged by {getWorkerName(report.acknowledgedBy)} 
                ({formatDistanceToNow(new Date(report.acknowledgedAt!), { addSuffix: true })})
              </span>
            </>
          )}
        </div>
      </div>

      {/* Metrics Summary */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-neutral-50 border-b border-neutral-200">
        <div className="text-center">
          <div className="text-2xl font-bold text-primary-600">
            {report.metrics.totalCompletedTasks}
          </div>
          <div className="text-sm text-neutral-600">Completed Tasks</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-warning-600">
            {report.metrics.totalCarriedOver}
          </div>
          <div className="text-sm text-neutral-600">Carried Over</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-error-600">
            {Math.round(report.metrics.totalIdleTime / 60)} min
          </div>
          <div className="text-sm text-neutral-600">Total Idle Time</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-success-600">
            {Math.round(report.metrics.shiftUtilization * 100)}%
          </div>
          <div className="text-sm text-neutral-600">Shift Utilization</div>
        </div>
      </div>

      {/* Completed Tasks */}
      <div className="border-b border-neutral-200">
        <button
          className="w-full px-4 py-3 flex items-center justify-between bg-white hover:bg-neutral-50"
          onClick={() => toggleSection('completed')}
        >
          <div className="flex items-center">
            <CheckCircle2 className="h-5 w-5 text-success-500 mr-2" />
            <span className="font-medium">Completed Tasks</span>
            <span className="ml-2 text-sm text-neutral-500">
              ({report.completedTasks.length})
            </span>
          </div>
          {expandedSection === 'completed' ? (
            <ChevronUp className="h-5 w-5 text-neutral-400" />
          ) : (
            <ChevronDown className="h-5 w-5 text-neutral-400" />
          )}
        </button>
        {expandedSection === 'completed' && (
          <div className="p-4 space-y-3">
            {report.completedTasks.map((task) => (
              <motion.div
                key={task.taskId}
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-neutral-50 rounded-md p-3 border border-neutral-200"
              >
                <div className="flex justify-between items-start mb-2">
                  <div>
                    <div className="font-medium">{task.partNumber}</div>
                    <div className="text-sm text-neutral-600">{task.description}</div>
                  </div>
                  <div className="text-sm text-neutral-500">
                    {format(new Date(task.completedAt), 'HH:mm')}
                  </div>
                </div>
                <div className="flex items-center text-sm text-neutral-500">
                  <UserCheck className="h-4 w-4 mr-1" />
                  {task.completedBy.map(getWorkerName).join(', ')}
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </div>

      {/* Carried Over Tasks */}
      <div className="border-b border-neutral-200">
        <button
          className="w-full px-4 py-3 flex items-center justify-between bg-white hover:bg-neutral-50"
          onClick={() => toggleSection('carriedOver')}
        >
          <div className="flex items-center">
            <ArrowRightCircle className="h-5 w-5 text-warning-500 mr-2" />
            <span className="font-medium">Carried Over Tasks</span>
            <span className="ml-2 text-sm text-neutral-500">
              ({report.carriedOverTasks.length})
            </span>
          </div>
          {expandedSection === 'carriedOver' ? (
            <ChevronUp className="h-5 w-5 text-neutral-400" />
          ) : (
            <ChevronDown className="h-5 w-5 text-neutral-400" />
          )}
        </button>
        {expandedSection === 'carriedOver' && (
          <div className="p-4 space-y-3">
            {report.carriedOverTasks.map((task) => (
              <motion.div
                key={task.taskId}
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-neutral-50 rounded-md p-3 border border-neutral-200"
              >
                <div className="mb-2">
                  <div className="font-medium">{task.partNumber}</div>
                  <div className="text-sm text-neutral-600">{task.description}</div>
                </div>
                <div className="flex items-center justify-between mb-2">
                  <div className="text-sm text-neutral-500">{task.reason}</div>
                  <div className="text-sm font-medium">
                    Progress: {Math.round(task.progress * 100)}%
                  </div>
                </div>
                <div className="w-full bg-neutral-200 rounded-full h-2">
                  <div
                    className="bg-warning-500 h-2 rounded-full"
                    style={{ width: `${task.progress * 100}%` }}
                  />
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </div>

      {/* Idle Events */}
      <div className="border-b border-neutral-200">
        <button
          className="w-full px-4 py-3 flex items-center justify-between bg-white hover:bg-neutral-50"
          onClick={() => toggleSection('idle')}
        >
          <div className="flex items-center">
            <Clock className="h-5 w-5 text-error-500 mr-2" />
            <span className="font-medium">Idle Events</span>
            <span className="ml-2 text-sm text-neutral-500">
              ({report.idleEvents.length})
            </span>
          </div>
          {expandedSection === 'idle' ? (
            <ChevronUp className="h-5 w-5 text-neutral-400" />
          ) : (
            <ChevronDown className="h-5 w-5 text-neutral-400" />
          )}
        </button>
        {expandedSection === 'idle' && (
          <div className="p-4 space-y-3">
            {report.idleEvents.map((event) => (
              <motion.div
                key={`${event.taskId}-${event.startTime}`}
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-neutral-50 rounded-md p-3 border border-neutral-200"
              >
                <div className="flex justify-between items-start mb-2">
                  <div className="font-medium">{getWorkerName(event.workerId)}</div>
                  <div className="text-sm text-neutral-500">
                    {format(new Date(event.startTime), 'HH:mm')} - 
                    {format(new Date(event.endTime), 'HH:mm')}
                  </div>
                </div>
                <div className="text-sm text-error-600">
                  Duration: {Math.round(event.duration)} minutes
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </div>

      {/* Notes */}
      {report.notes && (
        <div className="p-4 border-b border-neutral-200">
          <div className="font-medium mb-2">Additional Notes</div>
          <div className="text-sm text-neutral-600 whitespace-pre-wrap">
            {report.notes}
          </div>
        </div>
      )}

      {/* Acknowledge Button */}
      {!report.acknowledgedBy && onAcknowledge && (
        <div className="p-4 bg-neutral-50">
          <button
            onClick={onAcknowledge}
            className="w-full py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 flex items-center justify-center"
          >
            <UserCheck className="h-5 w-5 mr-2" />
            Acknowledge Handover Report
          </button>
        </div>
      )}
    </div>
  );
};

export default HandoverReport;